TASK 1

create database DB;
use DB;

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(255),
    Email VARCHAR(255) UNIQUE,
    ContactNumber VARCHAR(20),
    Address TEXT);
CREATE TABLE Couriers (
    CourierID INT PRIMARY KEY,
    SenderName VARCHAR(255),
    SenderAddress TEXT,
    ReceiverName VARCHAR(255),
    ReceiverAddress TEXT,
    Weight DECIMAL(5, 2),
    Status VARCHAR(50),
    TrackingNumber VARCHAR(20) UNIQUE,
    DeliveryDate DATE);
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    CourierID INT,
    ServiceID INT,
    PaymentID INT,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (CourierID) REFERENCES Couriers(CourierID),
    FOREIGN KEY (ServiceID) REFERENCES CourierServices(ServiceID),
    FOREIGN KEY (PaymentID) REFERENCES Payment(PaymentID));
CREATE TABLE Parcels (
    ParcelID INT PRIMARY KEY,
    OrderID INT,
    Description TEXT,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID));
CREATE TABLE CourierServices (
    ServiceID INT PRIMARY KEY,
    ServiceName VARCHAR(100),
    Cost DECIMAL(8, 2));
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    Name VARCHAR(255),
    Email VARCHAR(255) UNIQUE,
    ContactNumber VARCHAR(20),
    Role VARCHAR(50),
    Salary DECIMAL(10, 2));
CREATE TABLE Locations (
    LocationID INT PRIMARY KEY,
    LocationName VARCHAR(100),
    Address TEXT);
CREATE TABLE Payment (
    PaymentID INT PRIMARY KEY,
    CourierID INT,
    LocationID INT,
    Amount DECIMAL(10, 2),
    PaymentDate DATE,
    FOREIGN KEY (CourierID) REFERENCES Couriers(CourierID),
    FOREIGN KEY (LocationID) REFERENCES Locations(LocationID));
    

INSERT INTO Customers (CustomerID, Name, Email, ContactNumber, Address) 
VALUES 
    (1, 'John Doe', 'john@example.com', '1234567890', '123 Main St, City'),
    (2, 'Jane Smith', 'jane@example.com', '9876543210', '456 Elm St, Town'),
    (3, 'Alice Johnson', 'alice@example.com', '5551234567', '789 Oak St, Village'),
    (4, 'Bob Williams', 'bob@example.com', '7778889999', '101 Pine St, Hamlet'),
    (5, 'Emily Brown', 'emily@example.com', '4445556666', '202 Cedar St, Borough');
INSERT INTO Couriers (CourierID, SenderName, SenderAddress, ReceiverName, ReceiverAddress, Weight, Status, TrackingNumber, DeliveryDate)
VALUES 
    (1, 'Mark Turner', '111 Sender St, City', 'Sara Johnson', '222 Receiver St, Town', 2.5, 'In Transit', 'ABC123', '2024-04-28'),
    (2, 'Michael Clark', '333 Sender St, Village', 'Emma Davis', '444 Receiver St, Hamlet', 3.2, 'Delivered', 'DEF456', '2024-04-25'),
    (3, 'Jennifer White', '555 Sender St, Borough', 'Daniel Wilson', '666 Receiver St, City', 1.8, 'Pending', 'GHI789', NULL),
    (4, 'David Harris', '777 Sender St, Town', 'Olivia Martinez', '888 Receiver St, Village', 4.1, 'In Transit', 'JKL012', '2024-04-27'),
    (5, 'Lisa Moore', '999 Sender St, Hamlet', 'Sophia Taylor', '000 Receiver St, Borough', 2.9, 'Delivered', 'MNO345', '2024-04-24');
INSERT INTO CourierServices (ServiceID, ServiceName, Cost)
VALUES 
    (1, 'Standard Delivery', 10.00),
    (2, 'Express Delivery', 20.00),
    (3, 'Same-day Delivery', 30.00);
INSERT INTO Employees (EmployeeID, Name, Email, ContactNumber, Role, Salary)
VALUES 
    (1, 'John Smith', 'johnsmith@example.com', '1112223333', 'Manager', 50000.00),
    (2, 'Emily Johnson', 'emilyjohnson@example.com', '4445556666', 'Delivery Staff', 30000.00),
    (3, 'Michael Brown', 'michaelbrown@example.com', '7778889999', 'Delivery Staff', 30000.00),
    (4, 'Sarah Davis', 'sarahdavis@example.com', '1234567890', 'Customer Service', 35000.00),
    (5, 'David Wilson', 'davidwilson@example.com', '9876543210', 'Customer Service', 35000.00);
INSERT INTO Locations (LocationID, LocationName, Address)
VALUES 
    (1, 'City Hub', '111 Central Ave, City'),
    (2, 'Town Hub', '222 Central St, Town'),
    (3, 'Village Hub', '333 Central Blvd, Village'),
    (4, 'Hamlet Hub', '444 Central Dr, Hamlet'),
    (5, 'Borough Hub', '555 Central Ln, Borough'); 
INSERT INTO Payment (PaymentID, CourierID, LocationID, Amount, PaymentDate)
VALUES 
    (1, 1, 1, 15.00, '2024-04-27'),
    (2, 2, 2, 20.00, '2024-04-25'),
    (3, 3, 3, 10.00, '2024-04-26'),
    (4, 4, 4, 25.00, '2024-04-27'),
    (5, 5, 5, 18.00, '2024-04-24');
INSERT INTO Orders (OrderID, CustomerID, CourierID, ServiceID, PaymentID)
VALUES 
    (1, 1, 1, 1, 1),
    (2, 2, 2, 2, 2),
    (3, 3, 3, 3, 3),
    (4, 4, 4, 1, 4),
    (5, 5, 5, 2, 5);
INSERT INTO Parcels (ParcelID, OrderID, Description)
VALUES 
    (1, 1, 'Electronics'),
    (2, 2, 'Books'),
    (3, 3, 'Clothing'),
    (4, 4, 'Furniture'),
    (5, 5, 'Appliances');
    
TASK 2

1.SELECT * FROM Customers;

2.SELECT * FROM Orders WHERE CustomerID = 3;

3.SELECT * FROM Couriers;

4.SELECT * FROM Parcels WHERE OrderID = 2;

5.SELECT * FROM Orders WHERE CourierID = 2;

6.SELECT * FROM Couriers WHERE Status != 'Delivered';

7.SELECT * FROM couriers WHERE DeliveryDate = CURDATE();

8.SELECT * FROM couriers WHERE Status = 'pending';

9.select count(courierid) from orders
group by courierid;

10.SELECT CourierID, AVG(DATEDIFF(DeliveryDate, OrderDate)) AS AvgDeliveryTime
FROM couriers
GROUP BY CourierID;

11.SELECT * FROM couriers WHERE Weight BETWEEN 2.0 AND 4.3;

12.SELECT * FROM Employees WHERE Name LIKE '%John%';

13.select * from couriers where courierid in (select courierid from payment where amount>15.00);

TASK 3

14.select count(courierid) from couriers group by employeeid;

15.select SUM(amount) from payment
group by locationid;

16.select count(courierid) from payment 
group by locationid;

18.select locationid from payment 
group by locationid
having sum(amount)<15;

19.select locationid,sum(amount) from payment
group by locationid;

20.select courierid from payment
where amount>20 and locationid=4;

21.select courierid from payment
where amount>15 and paymentdate>2024-04-24;

22.select courierid from payment
where amount>10 and paymentdate<2024-04-27;

TASK 4

23.SELECT p.*, c.SenderName AS CourierName, c.ReceiverName AS CourierReceiver
FROM Payment p
JOIN Couriers c ON p.CourierID = c.CourierID;

24.SELECT p.*, l.LocationName, l.Address AS LocationAddress
FROM Payment p
JOIN Locations l ON p.LocationID = l.LocationID;

25.SELECT p.*, c.SenderName AS CourierName, c.ReceiverName AS CourierReceiver, l.LocationName, l.Address AS LocationAddress
FROM Payment p
JOIN Couriers c ON p.CourierID = c.CourierID
JOIN Locations l ON p.LocationID = l.LocationID;

26.SELECT p.*, c.SenderName, c.ReceiverName
FROM Payment p
JOIN Couriers c ON p.CourierID = c.CourierID;

27.SELECT p.CourierID, c.SenderName, SUM(p.Amount) AS TotalPayment
FROM Payment p
JOIN Couriers c ON p.CourierID = c.CourierID
GROUP BY p.CourierID, c.SenderName;

28.SELECT * FROM Payment WHERE PaymentDate = '2024-04-25';

29.SELECT p.*, c.SenderName AS CourierSenderName, c.SenderAddress AS CourierSenderAddress, c.ReceiverName AS CourierReceiverName, c.ReceiverAddress AS CourierReceiverAddress
FROM Payment p
JOIN Couriers c ON p.CourierID = c.CourierID;

30.SELECT p.*, l.LocationName, l.Address AS LocationAddress
FROM Payment p
JOIN Locations l ON p.LocationID = l.LocationID;

31.SELECT c.CourierID, c.SenderName, SUM(p.Amount) AS TotalPayment
FROM Couriers c
LEFT JOIN Payment p ON c.CourierID = p.CourierID
GROUP BY c.CourierID, c.SenderName;

32.SELECT * 
FROM Payment 
WHERE PaymentDate BETWEEN 2024-04-25 AND 2024-04-27;

33.SELECT *
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
LEFT JOIN Couriers cr ON o.CourierID = cr.CourierID;

34.SELECT *
FROM Couriers c
OUTER JOIN CourierServices cs ON c.ServiceID = cs.ServiceID;

35.SELECT *
FROM Employees e
OUTER JOIN Payment p ON e.EmployeeID = p.EmployeeID;

36.SELECT *FROM Customers
CROSS JOIN CourierServices;

38.SELECT *
FROM Couriers cr
LEFT JOIN Customers c ON cr.SenderName = c.Name;

39.SELECT *
FROM Couriers cr
LEFT JOIN Customers c ON cr.ReceiverName = c.Name;

40.SELECT *
FROM Couriers 
LEFT JOIN CourierServices ON couriers.courierID = courierservices.ServiceID;

41.SELECT e.EmployeeID, e.Name, COUNT(o.CourierID) AS TotalCouriersAssigned
FROM Employees e
LEFT JOIN Orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.Name;

42.SELECT p.LocationID, l.LocationName, SUM(p.Amount) AS TotalPaymentReceived
FROM Payment p
JOIN Locations l ON p.LocationID = l.LocationID
GROUP BY p.LocationID, l.LocationName;

43.SELECT *FROM Couriers
WHERE SenderName IN (SELECT SenderName FROM Couriers
GROUP BY SenderName
HAVING COUNT(*) > 1);

44.SELECT Role FROM Employees
GROUP BY Role
HAVING COUNT(*) > 1;

45.SELECT * FROM Payment
WHERE CourierID IN (SELECT CourierID FROM Orders
GROUP BY LocationID, courierid
HAVING COUNT(*) > 1);

46.SELECT * FROM Couriers
WHERE SenderAddress IN (SELECT SenderAddress FROM Couriers
GROUP BY SenderAddress
HAVING COUNT(*) > 1);

47.SELECT e.EmployeeID, e.Name, COUNT(o.CourierID) AS TotalCouriersDelivered
FROM Employees e
LEFT JOIN Orders o ON e.EmployeeID = o.EmployeeID
WHERE o.Status = 'Delivered'
GROUP BY e.EmployeeID, e.Name;

48.SELECT c.*
FROM Couriers c
JOIN Payment p ON c.CourierID = p.CourierID
JOIN CourierServices cs ON c.ServiceID = cs.ServiceID
WHERE p.Amount > cs.Cost;

TASK 5

49.SELECT * FROM Couriers
WHERE Weight > (SELECT AVG(Weight)
FROM Couriers);

50.select name, salary from employees
where salary>(select avg(salary) from employees);

51.SELECT SUM(Cost) FROM CourierServices
WHERE Cost < (SELECT MAX(Cost)FROM CourierServices);

52.SELECT DISTINCT c.* FROM Couriers c
JOIN Payment p ON c.CourierID = p.CourierID;

53.SELECT l.LocationName FROM Locations l
JOIN Payment p ON l.LocationID = p.LocationID
WHERE p.Amount = (SELECT MAX(Amount) FROM Payment);

54.SELECT * FROM Couriers
WHERE Weight > (SELECT MAX(Weight) FROM Couriers
WHERE SenderName = 'david harris');

                                                                                                                                                                         

